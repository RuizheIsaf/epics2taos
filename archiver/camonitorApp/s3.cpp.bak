#include "s3.h"
#include "loadConfig.h"





static const char ALLOCATION_TAG[] = "camonitor";
Aws::SDKOptions options;
Aws::String region;

// List all Amazon Simple Storage Service (Amazon S3) buckets under the account.
bool ListBuckets(const Aws::S3Crt::S3CrtClient& s3CrtClient, const Aws::String& bucketName) {

    Aws::S3Crt::Model::ListBucketsOutcome outcome = s3CrtClient.ListBuckets();

    if (outcome.IsSuccess()) {
        std::cout << "All buckets under my account:" << std::endl;

        for (auto const& bucket : outcome.GetResult().GetBuckets())
        {
            std::cout << "  * " << bucket.GetName() << std::endl;
        }
        std::cout << std::endl;

        return true;
    }
    else {
        std::cout << "ListBuckets error:\n"<< outcome.GetError() << std::endl << std::endl;

        return false;
    }
}

// Create an Amazon Simple Storage Service (Amazon S3) bucket.
bool CreateBucket(const Aws::S3Crt::S3CrtClient& s3CrtClient, const Aws::String& bucketName,
    const Aws::S3Crt::Model::BucketLocationConstraint& locConstraint) {

    std::cout << "Creating bucket: \"" << bucketName << "\" ..." << std::endl;

    Aws::S3Crt::Model::CreateBucketRequest request;
    request.SetBucket(bucketName);

    //  If you don't specify an AWS Region, the bucket is created in the US East (N. Virginia) Region (us-east-1)
    if (locConstraint != Aws::S3Crt::Model::BucketLocationConstraint::us_east_1)
    {
        Aws::S3Crt::Model::CreateBucketConfiguration bucket_config;
        bucket_config.SetLocationConstraint(locConstraint);

        request.SetCreateBucketConfiguration(bucket_config);
    }

    Aws::S3Crt::Model::CreateBucketOutcome outcome = s3CrtClient.CreateBucket(request);

    if (outcome.IsSuccess()) {
        std::cout << "Bucket created." << std::endl << std::endl;

        return true;
    }
    else {
        std::cout << "CreateBucket error:\n" << outcome.GetError() << std::endl << std::endl;

        return false;
    }
}

// Delete an existing Amazon S3 bucket.
bool DeleteBucket(const Aws::S3Crt::S3CrtClient& s3CrtClient, const Aws::String& bucketName) {

    std::cout << "Deleting bucket: \"" << bucketName << "\" ..." << std::endl;

    Aws::S3Crt::Model::DeleteBucketRequest request;
    request.SetBucket(bucketName);

    Aws::S3Crt::Model::DeleteBucketOutcome outcome = s3CrtClient.DeleteBucket(request);

    if (outcome.IsSuccess()) {
        std::cout << "Bucket deleted." << std::endl << std::endl;

        return true;
    }
    else {
        std::cout << "DeleteBucket error:\n" << outcome.GetError() << std::endl << std::endl;

        return false;
    }
}

// Put an Amazon S3 object to the bucket.
bool PutObject(const Aws::S3Crt::S3CrtClient& s3CrtClient, const Aws::String& bucketName, const Aws::String& objectKey, const Aws::String& fileName) {

    std::cout << "Putting object: \"" << objectKey << "\" to bucket: \"" << bucketName << "\" ..." << std::endl;

    Aws::S3Crt::Model::PutObjectRequest request;
    request.SetBucket(bucketName);
    request.SetKey(objectKey);
    std::shared_ptr<Aws::IOStream> bodyStream = Aws::MakeShared<Aws::FStream>(ALLOCATION_TAG, fileName.c_str(), std::ios_base::in | std::ios_base::binary);
    if (!bodyStream->good()) {
        std::cout << "Failed to open file: \"" << fileName << "\"." << std::endl << std::endl;
        return false;
    }
    request.SetBody(bodyStream);
    
    //A PUT operation turns into a multipart upload using the s3-crt client.
    //https://github.com/aws/aws-sdk-cpp/wiki/Improving-S3-Throughput-with-AWS-SDK-for-CPP-v1.9
    Aws::S3Crt::Model::PutObjectOutcome outcome = s3CrtClient.PutObject(request);
    //auto outcome = s3CrtClient.PutObject(request);
    if (outcome.IsSuccess()) {
        std::cout << "Object added." << std::endl << std::endl;

        return true;
    }
    else {
        std::cout << "PutObject error:\n" << outcome.GetError() << std::endl << std::endl;
        return false;
    }
}

// Get the Amazon S3 object from the bucket.
bool GetObject(const Aws::S3Crt::S3CrtClient& s3CrtClient, const Aws::String& bucketName, const Aws::String& objectKey) {

    std::cout << "Getting object: \"" << objectKey << "\" from bucket: \"" << bucketName << "\" ..." << std::endl;

    Aws::S3Crt::Model::GetObjectRequest request;
    request.SetBucket(bucketName);
    request.SetKey(objectKey);

    Aws::S3Crt::Model::GetObjectOutcome outcome = s3CrtClient.GetObject(request);

    if (outcome.IsSuccess()) {
       //Uncomment this line if you wish to have the contents of the file displayed. Not recommended for large files
       // because it takes a while.
       // std::cout << "Object content: " << outcome.GetResult().GetBody().rdbuf() << std::endl << std::endl;

        return true;
    }
    else {
        std::cout << "GetObject error:\n" << outcome.GetError() << std::endl << std::endl;

        return false;
    }
}

// Delete the Amazon S3 object from the bucket.
bool DeleteObject(const Aws::S3Crt::S3CrtClient& s3CrtClient, const Aws::String& bucketName, const Aws::String& objectKey) {

    std::cout << "Deleting object: \"" << objectKey << "\" from bucket: \"" << bucketName << "\" ..." << std::endl;

    Aws::S3Crt::Model::DeleteObjectRequest request;
    request.SetBucket(bucketName);
    request.SetKey(objectKey);

    Aws::S3Crt::Model::DeleteObjectOutcome outcome = s3CrtClient.DeleteObject(request);

    if (outcome.IsSuccess()) {
        std::cout << "Object deleted." << std::endl << std::endl;

        return true;
    }
    else {
        std::cout << "DeleteObject error:\n" << outcome.GetError() << std::endl << std::endl;

        return false;
    }
}

void test_s3() {

    std::cout << "Hello World!\n";
    
    Aws::SDKOptions options;
    //Turn on logging.
    options.loggingOptions.logLevel = Aws::Utils::Logging::LogLevel::Info;
    // Override the default log level for AWS common runtime libraries to see multipart upload entries in the log file.
    options.loggingOptions.crt_logger_create_fn = []() {
        return Aws::MakeShared<Aws::Utils::Logging::DefaultCRTLogSystem>(ALLOCATION_TAG, Aws::Utils::Logging::LogLevel::Debug);
    };

    //Uncomment the following code to override default global client bootstrap for AWS common runtime libraries.
    // options.ioOptions.clientBootstrap_create_fn = []() {
    //     Aws::Crt::Io::EventLoopGroup eventLoopGroup(0 /* cpuGroup */, 18 /* threadCount */);
    //     Aws::Crt::Io::DefaultHostResolver defaultHostResolver(eventLoopGroup, 8 /* maxHosts */, 300 /* maxTTL */);
    //     auto clientBootstrap = Aws::MakeShared<Aws::Crt::Io::ClientBootstrap>(ALLOCATION_TAG, eventLoopGroup, defaultHostResolver);
    //     clientBootstrap->EnableBlockingShutdown();
    //     return clientBootstrap;
    // };

    // Uncomment the following code to override default global TLS connection options for AWS common runtime libraries.
    // options.ioOptions.tlsConnectionOptions_create_fn = []() {
    //     Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitDefaultClient();
    //     tlsCtxOptions.OverrideDefaultTrustStore(<CaPathString>, <CaCertString>);
    //     Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT);
    //     return Aws::MakeShared<Aws::Crt::Io::TlsConnectionOptions>(ALLOCATION_TAG, tlsContext.NewConnectionOptions());
    // };

    Aws::InitAPI(options);
    {

        // TODO: Add a large file to your executable folder, and update file_name to the name of that file.
        //    File "ny.json" (1940 census data; https://www.archives.gov/developer/1940-census#accessportiondataset) 
        //    is an example data file large enough to demonstrate multipart upload.  
        // Download "ny.json" from https://nara-1940-census.s3.us-east-2.amazonaws.com/metadata/json/ny.json
        Aws::String file_name = "config.ini";
        
        //TODO: Set to your account AWS Region.
        Aws::String region = Aws::Region::US_EAST_1;

        //The object_key is the unique identifier for the object in the bucket.
        Aws::String object_key = "my-object";

        // Create a globally unique name for the new bucket.
        // Format: "my-bucket-" + lowercase UUID.
        Aws::String uuid = Aws::Utils::UUID::RandomUUID();
        Aws::String bucket_name = "my-bucket-" +
            Aws::Utils::StringUtils::ToLower(uuid.c_str());

        const double throughput_target_gbps = 5;
        const uint64_t part_size = 8 * 1024 * 1024; // 8 MB.

        char  **fileData = NULL;
        int lines = 0;
        struct ConfigInfo* info = NULL;
        loadFile_configFile("./config.ini", &fileData, &lines);
        parseFile_configFile(fileData, lines, &info);
        char *endpoint = getInfo_configFile("s3_endpoint", info, lines);
        char *ak = getInfo_configFile("s3_accesskey", info, lines);
        char *sk = getInfo_configFile("s3_secretkey", info, lines);
        Aws::S3Crt::ClientConfiguration config;
        config.region = region;
        config.throughputTargetGbps = throughput_target_gbps;
        config.partSize = part_size;
        
	    //config.endpointOverride = getInfo_configFile("s3_endpoint", info, lines);
        config.endpointOverride = endpoint;
        config.scheme = Aws::Http::Scheme::HTTP;
        config.verifySSL = false;

        Aws::Client::ClientConfiguration cfg;  
        cfg.endpointOverride = "127.0.0.1:9000";  // S3服务器地址和端口
        cfg.scheme = Aws::Http::Scheme::HTTP;
        cfg.verifySSL = false;

        Aws::Auth::AWSCredentials cred(ak,sk);
        
        Aws::String bucket_name1 = "test1";
        Aws::String object_key1 = "config.ini";
        //s3 crt client
        Aws::S3Crt::S3CrtClient s3_crt_client(cred, config, Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::Always, true);
        Aws::S3Crt::Model::PutObjectRequest request;
        request.SetBucket(bucket_name1);
        request.SetKey(object_key1);
        std::shared_ptr<Aws::IOStream> bodyStream = Aws::MakeShared<Aws::FStream>(ALLOCATION_TAG, object_key1.c_str(), std::ios_base::in | std::ios_base::binary);
        if (!bodyStream->good()) {
            std::cout << "Failed to open file: \"" << object_key1 << "\"." << std::endl << std::endl;
        }
        request.SetBody(bodyStream);
        Aws::S3Crt::Model::PutObjectOutcome outcome = s3_crt_client.PutObject(request);
        if (outcome.IsSuccess()) {
            std::cout << "Object added -- s3_crt_client." << std::endl << std::endl;
        }
        else {
            std::cout << "PutObject error -- s3_crt_client:\n" << outcome.GetError() << std::endl << std::endl;
        }

        //s3 client
        Aws::S3::S3Client s3_client(cred, config, Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::Always,true);
        Aws::S3::Model::PutObjectRequest object_request;
        object_request.SetBucket(bucket_name1);
        object_request.SetKey(object_key1);
        std::shared_ptr<Aws::IOStream> input_data = Aws::MakeShared<Aws::FStream>("SampleAllocationTag", object_key1.c_str(), std::ios_base::in | std::ios_base::binary);
        object_request.SetBody(input_data);
        auto put_object_outcome = s3_client.PutObject(object_request);
        if (put_object_outcome.IsSuccess()) {
            std::cout << "Object added -- s3_client." << std::endl << std::endl;
        }
        else {
            std::cout << "PutObject error -- s3_client:\n" << put_object_outcome.GetError() << std::endl << std::endl;
        }

        //Use BucketLocationConstraintMapper to get the BucketLocationConstraint enum from the region string.
        //https://sdk.amazonaws.com/cpp/api/0.14.3/namespace_aws_1_1_s3_1_1_model_1_1_bucket_location_constraint_mapper.html#a50d4503d3f481022f969eff1085cfbb0
        Aws::S3Crt::Model::BucketLocationConstraint locConstraint = Aws::S3Crt::Model::BucketLocationConstraintMapper::GetBucketLocationConstraintForName(region);

        //ListBuckets(s3_crt_client, bucket_name);
        

        //CreateBucket(s3_crt_client, bucket_name, locConstraint);

        //PutObject(s3_crt_client, bucket_name1, object_key1, file_name);

        //GetObject(s3_crt_client, "test1", "listBucket.cpp");

        //DeleteObject(s3_crt_client, bucket_name1, object_key1);

        //DeleteBucket(s3_crt_client, bucket_name);
    }
    Aws::ShutdownAPI(options);
}

void aws_initAPI()
{
    Aws::InitAPI(options);
}

void aws_shutdownAPI() 
{  
    Aws::ShutdownAPI(options);
}

void * s3crtclient_init(){ 
    region = Aws::Region::US_EAST_1;
    const double throughput_target_gbps = 5;
    const uint64_t part_size = 8 * 1024 * 1024; // 8 MB.

    char  **fileData = NULL;
    int lines = 0;
    struct ConfigInfo* info = NULL;
    loadFile_configFile("./config.ini", &fileData, &lines);
    parseFile_configFile(fileData, lines, &info);
    char *endpoint = getInfo_configFile("s3_endpoint", info, lines);
    char *ak = getInfo_configFile("s3_accesskey", info, lines);
    char *sk = getInfo_configFile("s3_secretkey", info, lines);

    Aws::Client::ClientConfiguration cfg;
    cfg.endpointOverride = endpoint;
    cfg.scheme = Aws::Http::Scheme::HTTP;
    cfg.verifySSL = false;

    Aws::Auth::AWSCredentials cred(ak,sk);
    
    Aws::S3::S3Client *s3client = new Aws::S3::S3Client(cred, cfg, Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::Always, true);
    
    void *s3client_ptr = s3client;
    return s3client_ptr;

    // Aws::S3Crt::ClientConfiguration config;
    // config.region = region;
    // config.throughputTargetGbps = throughput_target_gbps;
    // config.partSize = part_size;
    
    // config.endpointOverride = endpoint;
    // config.scheme = Aws::Http::Scheme::HTTP;
    // config.verifySSL = false;

    // Aws::Auth::AWSCredentials cred(ak,sk);
    
    // Aws::S3Crt::S3CrtClient *s3_crt_client = new Aws::S3Crt::S3CrtClient(cred, config);
    
    // void * s3_crt_client_ptr = s3_crt_client;

    // return s3_crt_client_ptr;  
   
}

void s3_upload(void *s3_crt_client_ptr, void *dbr, char *pvname, size_t dbrsize, long time) {

    Aws::S3Crt::Model::PutObjectRequest request;

    Aws::S3Crt::Model::BucketLocationConstraint locConstraint = Aws::S3Crt::Model::BucketLocationConstraintMapper::GetBucketLocationConstraintForName(region);

    //The object_key is the unique identifier for the object in the bucket.
    Aws::String object_key;
    object_key = pvname + std::to_string(time);
    
    std::cout<<"-------------------------------------------------test:"<<object_key<<"\n";

    Aws::String bucket_name = "my-bucket";

            
    CreateBucket(*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr), bucket_name, locConstraint);


    request.WithBucket(bucket_name).WithKey(object_key);

    auto data = Aws::MakeShared<Aws::StringStream>("PutObjectInputStream", std::stringstream::in | std::stringstream::out | std::stringstream::binary);
    
    data->write(reinterpret_cast<char*>(dbr), dbrsize);

    request.SetBody(data);

    Aws::S3Crt::Model::PutObjectOutcome outcome = (*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr)).PutObject(request);

    if (outcome.IsSuccess()) {
        std::cout << "Object added." << std::endl << std::endl;
    }
    else {
        std::cout << "PutObject error:\n" << outcome.GetError() << std::endl << std::endl;
    }

    //Aws::S3Crt::S3CrtClient s3_crt_client = *static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr);
    //ListBuckets(*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr), bucket_name);//注意不能再新建一个S3CrtClient，AWS好像会报错
    //ListBuckets(s3_crt_client, bucket_name);
    //Aws::ShutdownAPI(options);
}

void s3_upload1(void *s3client, void * dbr, char * pvname, size_t dbrsize, long time) {

    Aws::S3::Model::PutObjectRequest request;

    Aws::S3Crt::Model::BucketLocationConstraint locConstraint = Aws::S3Crt::Model::BucketLocationConstraintMapper::GetBucketLocationConstraintForName(region);

    //The object_key is the unique identifier for the object in the bucket.
    Aws::String object_key;
    object_key = pvname + std::to_string(time);
    //Aws::String object_key = "config.ini";

    Aws::String bucket_name = "my-bucket";

    request.WithBucket(bucket_name).WithKey(object_key);
    //request.SetBucket(bucket_name);
    //request.SetKey(object_key);

    //const std::shared_ptr<Aws::IOStream> input_data = Aws::MakeShared<Aws::FStream>("SampleAllocationTag", object_key.c_str(), std::ios_base::in | std::ios_base::binary);

    auto data = Aws::MakeShared<Aws::StringStream>("PutObjectInputStream", std::stringstream::in | std::stringstream::out | std::stringstream::binary);
    
    data->write(reinterpret_cast<char*>(dbr), dbrsize);

    request.SetBody(data);

    //request.SetBody(input_data);

    auto outcome = (*static_cast<Aws::S3::S3Client *>(s3client)).PutObject(request);
    if (outcome.IsSuccess()) {
        std::cout << "Object added." << std::endl << std::endl;
    }
    else {
        std::cout << "PutObject error:\n" << outcome.GetError() << std::endl << std::endl;
    }
    //PutObject((*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr)), bucket_name, object_key, "config.ini");
    
    //------------------------------------------------------------------------------------------

    // char a = 'a';
    // char b = 'b';
    // char c ='c';
    // char *charptr = &a;
    // char *charptr1[3] = {&a, &b, &c};

    // void *dbr = charptr;        
    // size_t dbrsize = sizeof(charptr);
    // //------------------------------------------------------------------------------------------
    // //CreateBucket(*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr), bucket_name, locConstraint);
    // request.WithBucket(bucket_name).WithKey(object_key);

    // auto data = Aws::MakeShared<Aws::StringStream>("PutObjectInputStream", std::stringstream::in | std::stringstream::out | std::stringstream::binary);
    
    // //data->write(reinterpret_cast<char*>(dbr), dbrsize);
    // data->write(charptr, sizeof(charptr));

    // request.SetBody(data);

    // Aws::S3Crt::Model::PutObjectOutcome outcome = (*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr)).PutObject(request);

    // if (outcome.IsSuccess()) {
    //     std::cout << "Object added." << std::endl << std::endl;
    // }
    // else {
    //     std::cout << "PutObject error:\n" << outcome.GetError() << std::endl << std::endl;
    // }

    //Aws::S3Crt::S3CrtClient s3_crt_client = *static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr);
    //ListBuckets(*static_cast<Aws::S3Crt::S3CrtClient *>(s3_crt_client_ptr), bucket_name);//注意不能再新建一个S3CrtClient，AWS好像会报错
    //ListBuckets(s3_crt_client, bucket_name);
    //Aws::ShutdownAPI(options);
}
